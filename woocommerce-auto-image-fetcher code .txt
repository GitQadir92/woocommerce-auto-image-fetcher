add_action('init', 'auto_update_missing_product_images');

function auto_update_missing_product_images() {
    if (!class_exists('WooCommerce')) {
        return; // Exit if WooCommerce is not active
    }

    // ⛔️ Replace with your actual Google API key and Custom Search Engine (CX) ID
    $google_api_key = 'YOUR_GOOGLE_API_KEY';
    $cx_key = 'YOUR_CX_KEY';

    // Get products missing images
    $args = [
        'post_type'      => 'product',
        'posts_per_page' => 5,
        'meta_query'     => [
            [
                'key'     => '_thumbnail_id',
                'compare' => 'NOT EXISTS'
            ]
        ],
    ];

    $products = get_posts($args);

    foreach ($products as $product) {
        $product_id = $product->ID;
        $title = get_the_title($product_id);

        if (!has_post_thumbnail($product_id)) {
            $image_url = fetch_product_image_from_google($title, $google_api_key, $cx_key);
            if ($image_url) {
                set_product_image($product_id, $image_url);
            }
        }
    }
}

// ✅ Fetch image from Google Custom Search
function fetch_product_image_from_google($title, $google_api_key, $cx_key) {
    $search_query = urlencode($title);
    $api_url = "https://www.googleapis.com/customsearch/v1?q=$search_query&cx=$cx_key&searchType=image&key=$google_api_key";

    $response = wp_remote_get($api_url);
    if (is_wp_error($response)) {
        error_log("Google API Error: " . $response->get_error_message());
        return '';
    }

    $body = json_decode(wp_remote_retrieve_body($response), true);

    if (!isset($body['items'][0]['link'])) {
        error_log("Google API Response Error: " . json_encode($body));
        return '';
    }

    foreach ($body['items'] as $image) {
        if (isset($image['link']) && filter_var($image['link'], FILTER_VALIDATE_URL)) {
            return $image['link'];
        }
    }

    return '';
}

// ✅ Assign image as product thumbnail
function set_product_image($product_id, $image_url) {
    $upload_dir = wp_upload_dir();
    $image_data = file_get_contents($image_url);

    if (!$image_data) {
        error_log("Image Fetch Error: Could not download image from $image_url");
        return;
    }

    $filename = basename(parse_url($image_url, PHP_URL_PATH));
    $file_path = $upload_dir['path'] . '/' . $filename;

    file_put_contents($file_path, $image_data);

    $filetype = wp_check_filetype($filename, null);
    if (!$filetype['type']) {
        error_log("Invalid Image Type: $filename");
        return;
    }

    $attachment = [
        'post_mime_type' => $filetype['type'],
        'post_title'     => sanitize_file_name($filename),
        'post_content'   => '',
        'post_status'    => 'inherit'
    ];

    $attach_id = wp_insert_attachment($attachment, $file_path, $product_id);
    require_once(ABSPATH . 'wp-admin/includes/image.php');
    $attach_data = wp_generate_attachment_metadata($attach_id, $file_path);
    wp_update_attachment_metadata($attach_id, $attach_data);
    set_post_thumbnail($product_id, $attach_id);
}
